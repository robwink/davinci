# test-overlays.dav

# Davinci GUI test script.

verbose = 1
load_module("gui")

#####
#
# Support functions
#
#####

# showVicar() displays a VICAR widget with the specified filename.

define showVicar() {
	fileName = $1
	data = load_pds(fileName)

	if (dim(data.qube.data)[3] != 10) {
		gui_ErrorDialog(fileName, "Only 10-band cubes are supported.")
		return(0)
	}

	data = data.qube.data
	data[where data < 0] = 0
	dpyData = cat(stretch(data[,,3]), stretch(data[,,5]), stretch(data[,,7]),z)
	dpyData = bsq(dpyData)

	vtop = gui.create("topLevelShell", name=fileName)
	vicar = gui.create("vicar", vtop, { image = dpyData })
	gui.set(vicar, { inputMode = "MODE_SELECT" })
	gui.realize(vtop)
}

#####
#
# Callback to handle a browse selection on the main list
#
#####

define cb_list (id)
{
	selection = gui.get(id).selectedItems[,1]
	showVicar(selection);
}

#####
#
# Main
#
#####

##### topLevelShell widget

# Create a top-level shell window with the title "Davinci".
# You must create a top-level shell to hold other widgets before they can be
# displayed.

top = gui.create("topLevelShell", name = "Davinci")

##### form widget

# Create a form layout widget to arrange some other widgets.
form = gui.create("form", top)

##### label widget

# Create a label containing user instructions, spanning the top of the
# window.  The properties structure is build explicitly for clarity.

# The <left/right/top/bottom>Attachment properties are inherited by all
# children of the form widget.
# See the Motif reference manual for explanations of these properties.  Some
# of these values are already the default, but are included for clarity.

# Create the label with the form widget as its parent.
# bottomAttachment will be set later.
infoLabel = gui.create("label", form, {\
	labelString = "Click on a file to open a VICAR widget.",\
	leftAttachment = "ATTACH_FORM",\
	topAttachment = "ATTACH_FORM",\
	rightAttachment = "ATTACH_FORM"});

##### list widget

#	Sometimes it is clearer to build the properties in a separate structure:
#
#	listProps = struct()
#	listProps.itemList = fileNames
#	listProps.visibleItemCount = length(fileNames)
#	listProps.leftAttachment = "ATTACH_FORM"
#	listProps.rightAttachment = "ATTACH_FORM"
#	listProps.bottomAttachment = "ATTACH_FORM"
#
# Here is an example of referencing a widget by its Davinci widget ID.
#
#	listProps.topAttachment = "ATTACH_WIDGET"
#	listProps.topWidget = infoLabel
#
#	list = gui.create("list", form, listProps)
#	gui.get(list, all = 1)

# Create a list widget to hold a static list of filenames.
fileNames = cat( \
	"I00996003RDR.project.normalize.cub", \
	"I01283002RDR.project.normalize.cub", \
	"I01645003RDR.project.normalize.cub", \
	"I01957003RDR.project.normalize.cub", \
	"I06376002RDR.project.normalize.cub", \
	axis = y);

##### Widget referencing

# We can tell the form to keep the top of the list wherever the label ends by
# setting the topWidget resource to the label, and the topAttachment resource
# to the ATTACH_WIDGET option, which tells the form to make use of topWidget.
# These particular resource values are coupled and MUST be set at the same
# time, or the setting will be ignored.  See the Motif reference for details.

list = gui.create("list", form,{\
	itemList = fileNames,\
	visibleItemCount = length(fileNames),\
	topWidget = infoLabel,\
	topAttachment = "ATTACH_WIDGET",\
	leftAttachment = "ATTACH_FORM",\
	rightAttachment = "ATTACH_FORM",\
	bottomAttachment = "ATTACH_FORM"});

##### Display

# Now that the widget is complete, display it to the user.
gui.addcallback (list, "browseSelection", sprintf("cb_list(id=%d)",list));
gui.realize(top);
