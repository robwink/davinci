#!../davinci -fqv0

good = { ".", "/dev/null", "/tmp", "/bin/ls" }
bad = { "", "/dev/null/foo", "/vmunix/mypants", "/etc/passwd/foo" }

#
# test the length() function
#

	printf("Testing length()\t...");
	results = (0 == 1);
	results = results // (length(bad) == 4 )
	results = results // (length(good) == 4) 
	results = results // (length({ }) == 0) 
	results = results // (length({ a=5, b=6, 7 })  == 3) 
	results = results // (length(length(good)) == 1)   
	results = results // (length(1) == 1)   
	results = results // (length(1//3) == 2)   
	results = results // (length(create(3,5,7)) == 3*5*7)   
	results = results // (length("") == 0)   
	results = results // (length("four") == 4)   
	results = results // (length("/dev/null") == 9)   
	results = results // (length(cat("four","five",y)) == 2)  

	printf(" %d/%d ", sum(results), length(results)-1)
	if (results == 0 || sum(results) != length(results)-1) printf("failed.\n")
	else printf("passed.\n");

#
# test the fexists() function
#
	printf("Testing fexists()\t...");
	results = { };
	for (i = 1 ; i <= length(good) ; i+=1) {
		if (fexists(good[i]) == 1)  add_struct(results, good[i]);
	}
	for (i = 1 ; i <= length(bad) ; i+=1) {
		if (fexists(bad[i]) == 0)  add_struct(results, bad[i]);
	}

	printf(" %d/%d ", length(results), length(good)+length(bad));
	if (length(results) != length(good) + length(bad)) {
		printf("failed\n");
	} else {
		printf("passed\n");
	}
