Xfred -- The un-toolkit

The toolkit consists of N basic tools that rely only on Xlib.  It is
generally easier to rapidly produce applications in Xfred than it is to
produce them in Xt (and consequently you lose most of the "Extras" that
Xt forces upon you.)  The big advantage to the Xfred toolkit is that it
is simple.  Everything it does is easily understood and therefore is
easy to use.

The common feature to all the tools is that every tool can display a list
of Visuals.  Visuals are the basic graphic components that give a tool
its appearance.

For instance, a scrollbar (called a slider) might need to have a blue
field with a red thumb.  This would be an instance of a red SolidVisual
in the thumb, with a blue SolidVisual in the field.  Then again, you
might want a white box with a black outline for the thumb, over a black
and white patterned field.   This would be an instance of a black
OutlineVisual over a white SolidVisual in the thumb, and a black and
white StippledVisual in the scrollbar field.  (this combination is very
commonly used because it is monochrome and still looks good.)

The current list of visuals follows:

Pixmap:             N bit pixmap or a 1 bit bitmap
Text:               A text string
XImage:             An XImage
Solid:              A colored rectangle
Outline:            A non-filled rectangle
Tiled:              A Tiled rectangle  (repeated N bit pixmap)
Stippled:           A Stippled rectangle (repeated masked bitmap)
OpaqueStippled:     An Opaque Stipple rectangle (A 1 bit tile)
Hershey:            Text string using a vector font (allows rotation & scaling 
                    of some 4000 characters & symbols (19 fonts))

More Visual types will be added as they become necessary.
Visuals can be arbitrarily stacked to produce more complex graphics.

    For instance, you could place a rotated text string (Hershey) over a 
    grid field (Stipple) over an arbitrary image (XImage) which is on top
    of a colored background (Solid).

    An application in development is a musical score editor.  It uses a
    Stipple for the staff bars with Hersheys (which include musical symbols) 
    placed on top of that.  Each note is its own <button> (see below).  Those
	symbols that aren't present in the font are created as bitmaps (edited 
	with the standard X bitmap utility)

The current list of tools follows:

    Button:     A multistate machine.  Each state has its own Visual
                  list and therefore can be completely defined in
                  appearance.   Each state also has a its own list of
                  callbacks that are called when the button is activated
                  in that state.  
                Button is a misleading name.  It is, in fact, the simplest
                  input/output window that the toolkit supports, and can be
                  used for much more than a simple pushbutton. 

    Slider:     A simple scrollbar.  Has seperate components for the
                  thumb and the scroll field.  LeftRight and UpDown
                  sliders are supported (no arbitrary angles though)

    JoyStick:   A four way slider.  (thumb moves freely in a X by Y grid)

    List:       A composite of a Button and a Slider.  Multiple lines
                  of text are displayed in the button and the slider moves 
                  the lines of text up and down to show you more of the text.
                  (just like the Xterm scrollback sliderbars)

    Composite:  (Under development)  A edit button used for text input
                  (typically a filename) with a popup list of any previous
                  text that was entered into the button.  (exactly like the
                  MicroSoft Windows Composite widget that appears in many 
                  FileRequestors in windows programs.)

    FunctionMap: This is a special purpose joystick that almost
                    no one will find useful besides myself.  It allows
                    the user to define a mathematical function, 
                    graphically (ie: lay out the inflection points of a
                    plotted line interactivly)  Its neat, but of limited 
                    use to the average joe.

Each tool is allowed to define its "Activation Action" that is, what causes
the tool to be triggered.  In the case of a Slider, if you want continuous 
response, you select ButtonPress and ButtonMotion, or if you only want the 
final position of the thumb, trigger on only ButtonRelease.  In reality, you 
can automatically trigger on any XEvent type, or if necessary you can trigger 
manually from within code  (ie: if you wish to wait for input to become 
available through a socket.  You do your own select and then trigger your
button or whatever manually when you have data.)

When a tool triggers, it calls its callback list.  That is, it calls any user 
supplied routines with a pointer to the tool that triggered and the event that
triggered it.  (For instance, triggering on button press, you might switch 
the current state on a two state button (From "ON" to "OFF") and then call
any maintenance routines that the new state implies (turning something 
from ON to OFF))

In addition to the tools own routines, there are some major support 
routines for the library in general:

    initx()     Opens the default display, sets screen, gc, etc...

    xgets()     Activates an edit box over an existing button.  The
                edit box includes:
                    * Copy Buffer Paste (from the X cut and paste facility)
                    * Csh style filename completion 
                    * point and click inline edit ability (ie: click
                      on 3rd character to edit string at that point)
                    * Standard shell command line editing keys 
                      (^W word erase, ^U line erase...)
                    * 2-Way Text scrolling for editing large strings.

------------------------------------------------------------------------
#include "Xfred.h"
#define GetButtonText(B) (B->States[0]->Visuals->visual.t_vis.text)

Display *display;
int screen, depth;
GC gc;

count(Button B, XEvent *E)
{
	char buf[16];
	sprintf(buf, "%d", 
		atoi(GetButtonText(B))+ (E->xbutton.button == Button1 ? +1 : -1));
	SetButtonText(B, buf);
}

main()
{
	Button B;
	Window w;
	Font font;
	XEvent E;

	initx(&display, &screen, &gc, &depth);
	font = XLoadFont(display, "6x10");
	w = RootWindow(display, screen);

	B = XfCreateButton(display, w, 0, 0, 50, 20, 1, BLACK(display), "name", 1);
	XfAddButtonVisual(B, 0, 
		XfCreateVisual(B, 0, 0, 0, 0, BLACK(display), WHITE(display), 
		XfTextVisual, "0", font,  0));
	XfAddButtonCallback(B, 0, count, NULL);
	XfActivateButton(B, ExposureMask | ButtonPressMask);

    while (1) {
        XNextEvent(display, &E);
		XfButtonPush(XfEventButton(&E), &E);
    }
}
