#

#verbose = 0

load_module("gui")

define dcs(ignore,sample,variance) {
    if ($ARGC != 1) {
        printf("usage: dcs(input_image [,ignore=INT][,sample=VAL])\n")
        return(0);
    }

#
# this does a decorrelation stretch 
# Data will be centered around 127, with a sigma of +/- 50.
#

    # compute the symmetric covariance matrix and eigenvectors of it.
    a = $1

    if (HasValue(sample)) {
        if (HasValue(ignore)) {
            c = covar(sample, axis=z, ignore=ignore)
        } else {
            c = covar(sample, axis=z)
        }
    } else {
        if (HasValue(ignore)) {
            c = covar(a, axis=z, ignore=ignore)
        } else {
            c = covar(a, axis=z)
        }
    } 
    e = eigen(c)

    # generate the scaling matrix with the scaling factors on the diagonal
    # and compute the rotation matrix
    if (HasValue(variance)) {
        v = float(variance)
    } else {
        v = 50.0
    }

    s = identity(dim(a)[3]) * v/sqrt(e[1])
    m = mxm(mxm(e[2:], s), translate(e[2:], x, y))

    # We have to reshape the data to push it through mxm() because mxm is dumb.
    # Force the input to be bip so we can use the forbidden resize() function.
    d = dim(a);
    a = bip(a)
    resize(a, dim(a)[3], dim(a)[1]*dim(a)[2]);

    # subtract the mean of each band, rotate and add back 127
    if (HasValue(ignore)) {
        avg = avg(a,y,ignore=ignore)
    } else {
        avg = avg(a,y)
    }
    a = a - avg;
    a = mxm(a, m);
    a = a + 127;
    a = byte(bip(a));

    # reshape the data back to it's original size
    resize(a, d[1], d[2], d[3]);
    return(a)
}

define stretch() {
        a = $1
        b = moment(a)
        c = (((a - b[1]) / (b[2]-b[1])) * 255)

        return(byte(c));
}

define find_band(obj) {
        bands = obj.qube.band_bin.band_bin_original_band
        for (i = 1 ; i <= length(bands) ; i+=1) {
                if (bands[i] == $1) return(i);
        }
        return(1)
}

define sstretch(variance) {
        b = avg($1, ignore=-32768, both=1)
        v = 40
        if (HasValue(variance)) {
                v = variance
        }
        c = ($1 - float(b.avg))/float(b.stddev)*v+127
        return(byte(c))
}

define gui_ErrorDialog() {
  printf("%s: %s\n", $1, $2)
}

define showVicar(widgetMap) {

  fileName = $1
  data = load_pds(fileName)

  if (dim(data.qube.data)[3] != 10) {
    gui_ErrorDialog(fileName, "Only 10-band cubes are supported.")
    return(0)
  }

  data = data.qube.data
  data[where data < 0] = 0
  dpyData = bsq(cat(stretch(data[,,3]),stretch(data[,,5]),stretch(data[,,7]),z))

  vtop = gui.create("topLevelShell", name=fileName)
  vicar = gui.create("vicar", vtop, { image = dpyData })
  gui.set(vicar, { inputMode = "MODE_SELECT" })
  gui.realize(vtop)

  newVicar = { vicarWidgetId = vicar, origData = data, dpyData = dpyData, fileName = fileName }
  add_struct(widgetMap, name = sprintf("%d", vicar), value = newVicar)

}

top = gui.create("topLevelShell", name="Davinci")
fs = gui.create("fileSelectionBox", top, { pattern = "*.cub" })

gui.realize(top)

map = struct()

ok = 1
while (ok == 1) {
  event = gui.wait()
  if (event.widget == fs) {
    if (event.event == "cancel") {
      ok = 0
    } else if (event.event == "ok") {
      showVicar(widgetMap = map, gui.get(event.widget).dirSpec)
    } else if (event.event == "help") {
        printf("\n\nSelect a file in the FileSelectionBox and click OK to spawn a VICAR widget.\n\n")
    }
  } else {

    # See if it was a selection..

    if (event.event == "select") {
      selection = gui.get(event.widget).selection
      x = int(selection.x)
      y = int(selection.y)
      width = int(selection.width)
      height = int(selection.height)
      # Find the widget id.
      for (i = 1; i <= length(map); i = i + 1) {
        vicarInfo = map[i];
        if (event.widget == vicarInfo.vicarWidgetId) {
          crop = vicarInfo.origData[x:(x+width), y:(y+height), 3:7:2];
          dcs = bsq(dcs(cat(crop[,,1],crop[,,2],crop[,,3],z),ignore=0))
          for (yy = y; yy < (y + height); yy = yy + 1) {
            for (xx = x; xx < (x + width); xx = xx + 1) {
              vicarInfo.dpyData[xx,yy] = dcs[((xx-x)+1),((yy-y)+1)]
            }
          }
          gui.set(vicarInfo.vicarWidgetId, { image = vicarInfo.dpyData, selection = {} })
        }
      }
    }
  }
}

gui.destroy(top)
