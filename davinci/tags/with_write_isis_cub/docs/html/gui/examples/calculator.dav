#!/usr/local/bin/davinci -ifv

verbose = 0

# Load the GUI module.

load_module("gui")

#####
#
# Callbacks
#
#####

define numberCallback() {

  num = $1

  global(currentValue)
  global(display)

  # Number or decimal point was hit, append it to the display.

  currentValue = sprintf("%s%s", currentValue, gui.get(num).labelString)
  gui.set(display, { value = currentValue })

}

define operatorCallback() {

  op = $1

  global(leftValue)
  global(currentValue)
  global(pendingOp)
  global(display)

  # Operator was hit, save the current value and the pending operation.
  leftValue = currentValue
  pendingOp = op

  # Clear the current value and display.
  currentValue = ""
  gui.set(display, { value = "" })

}

define resultCallback() {

  widget = $1

  global(leftValue)
  global(currentValue)
  global(pendingOp)
  global(display)
  global(add)
  global(sub)
  global(mult)
  global(div)

  # Make sure we have two operands.
  if (leftValue != "" && currentValue != "") {

    left = atof(leftValue)
    right = atof(currentValue)
    ans = 0
    if (pendingOp == add) {
      ans = left + right
    } else if (pendingOp == sub) {
      ans = left - right
    } else if (pendingOp == mult) {
      ans = left * right
    } else if (pendingOp == div) {
      ans = left / right
    }

    # Clear the stack and display the answer.
    leftValue = ""
    currentValue = ""
    gui.set(display, { value = sprintf("%f", ans) })

  }


}

#####
#
# Main
#
#####

# Top level widget to hold everything.

top = gui.create("topLevelShell", name = "DavinciCalc")

# Use a rowcolumn widget as the outer container (default single column layout).
# Set the packing type so that everything takes up as little space as needed.

outerRC = gui.create("rowColumn", top, { packing = "PACK_TIGHT" })

# Add a textfield for display, with outerrc as its parent (container).

display = gui.create("textField", outerRC)

# Make it uneditable (user has to push the buttons).

gui.set(display, { editable = "false" })

# Create another rowcolumn for all the buttons.

buttonrc = gui.create("rowColumn", outerRC, { packing = "PACK_COLUMN" })

# Declare 4 rows by N columns (yes, it's really numColumns that controls this).

gui.set(buttonrc, { numColumns = 4 })

# Prevent the last column from being stretched to fill the frame width.

gui.set(buttonrc, { adjustLast = "false" })

# Add all the buttons, one column at a time (rowcolumn-imposed behavior).
# The order here is important in order for proper layout.

seven  = gui.create("pushButton", buttonrc, name = "7")
gui.addcallback(seven, "arm", sprintf("numberCallback(%d)", seven))
four   = gui.create("pushButton", buttonrc, name = "4")
gui.addcallback(four, "arm", sprintf("numberCallback(%d)", four))
one    = gui.create("pushButton", buttonrc, name = "1")
gui.addcallback(one, "arm", sprintf("numberCallback(%d)", one))
zero   = gui.create("pushButton", buttonrc, name = "0")
gui.addcallback(zero, "arm", sprintf("numberCallback(%d)", zero))
eight  = gui.create("pushButton", buttonrc, name = "8")
gui.addcallback(eight, "arm", sprintf("numberCallback(%d)", eight))
five   = gui.create("pushButton", buttonrc, name = "5")
gui.addcallback(five, "arm", sprintf("numberCallback(%d)", five))
two    = gui.create("pushButton", buttonrc, name = "2")
gui.addcallback(two, "arm", sprintf("numberCallback(%d)", two))
dec    = gui.create("pushButton", buttonrc, name = ".")
gui.addcallback(dec, "arm", sprintf("numberCallback(%d)", dec))
nine   = gui.create("pushButton", buttonrc, name = "9")
gui.addcallback(nine, "arm", sprintf("numberCallback(%d)", nine))
six    = gui.create("pushButton", buttonrc, name = "6")
gui.addcallback(six, "arm", sprintf("numberCallback(%d)", six))
three  = gui.create("pushButton", buttonrc, name = "3")
gui.addcallback(three, "arm", sprintf("numberCallback(%d)", three))
equals = gui.create("pushButton", buttonrc, name = "=")
gui.addcallback(equals, "arm", sprintf("resultCallback(%d)", equals))
div    = gui.create("pushButton", buttonrc, name = "/")
gui.addcallback(div, "arm", sprintf("operatorCallback(%d)", div))
mult  = gui.create("pushButton", buttonrc, name = "*")
gui.addcallback(mult, "arm", sprintf("operatorCallback(%d)", mult))
add   = gui.create("pushButton", buttonrc, name = "+")
gui.addcallback(add, "arm", sprintf("operatorCallback(%d)", add))
sub  = gui.create("pushButton", buttonrc, name = "-")
gui.addcallback(sub, "arm", sprintf("operatorCallback(%d)", sub))

# Some globals to retain state.

leftValue = ""
currentValue = ""
pendingOp = 0

# Display everything.

gui.realize(top)

verbose = 1
