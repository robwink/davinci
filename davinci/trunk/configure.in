dnl Process this file with autoconf to produce a configure script.
AC_INIT(array.c)
AC_CONFIG_HEADER(config.h)

dnl Check for sytem type
AC_CANONICAL_SYSTEM

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Check for X path.
AC_PATH_X

dnl Checks for libraries.
old_LDFLAGS="$LDFLAGS"
if test "$x_libraries" != ""
then
	LDFLAGS="$LDFLAGS -L$x_libraries"
fi

dnl
dnl Merge in the libraries specified by the user at the command line
dnl

LDFLAGS="$LDFLAGS -L$libdir"

AC_CHECK_LIB(m, sqrt)
AC_CHECK_LIB(X11, XOpenDisplay)
AC_CHECK_LIB(Xt, XtToolkitInitialize)
AC_CHECK_LIB(Xext,XShmPutImage)
AC_CHECK_LIB(Xm,XmCreateForm)
AC_CHECK_LIB(z,deflate)
AC_CHECK_LIB(hdf5,H5open)
AC_CHECK_LIB(usds,Themis_Entry)
AC_CHECK_LIB(msss_vis,read_DCT)

AC_CHECK_LIB(jpeg,jpeg_simple_progression)
AC_CHECK_LIB(termcap, tgetent)

dnl
dnl If we could not find libtermcap.a then see if we have
dnl libcurses.a instead.
dnl

if test "`echo $LIBS | grep termcap`" = ""
then
	AC_CHECK_LIB(curses, tgetent)
fi


CFLAGS="$CFLAGS -I."
LDFLAGS="$LDFLAGS -Lreadline"

dnl special check for readline. 
MAKEREAD=''
AC_CHECK_LIB(readline, rl_callback_handler_install)
if test "`echo $LIBS | grep readline`" = "" 
then
	MAKEREAD='readline/libreadline.a readline/libhistory.a'
	READLINE_LIB='-Lreadline -lhistory -lreadline'
	AC_CONFIG_SUBDIRS(readline)
	echo "*******************************************************************"
	echo "**     !   !   !       N   O   T   I   C   E       !   !   !     **"
	echo "** WAIT FOR CONFIGURE TO FINISH, BUILD readline/libreadline.a    **"
	echo "** AND readline/libhistory.a, THEN RUN CONFIGURE AGAIN AFTER     **"
	echo "** REMOVING config.cache AND config.log                          **"
	echo "*******************************************************************"
fi 



AC_CHECK_LIB(proj,pj_fwd,PROJ_OBJS="ff_projection.o",,)
if test "$PROJ_OBJS" != ""; then
	AC_CHECK_HEADERS(projects.h,[
			AC_DEFINE(HAVE_LIBPROJ)
			LIBS="-lproj $LIBS"
			],PROJ_OBJS="")
fi

AC_CHECK_LIB(tiff,TIFFIsTiled)
AC_CHECK_LIB(Magick, GetMagickInfo)

PL_LIB=''
AC_CHECK_LIB(plplotFX,c_plinit,PL_LIB='-lplplotFX',,)
if test "$PL_LIB" != ""
then
	AC_DEFINE(INCLUDE_API)
	AC_DEFINE(HAVE_PLPLOT)
	LIBS="$PL_LIB $LIBS"
	echo $LIBS
fi


#Check for the xrt3D lib and its dependancies
AC_ARG_ENABLE(xrt3d,
	 	[  --enable-xrt3d           enable xrt3d support (default is no)],
		[with_xrt=$enableval],
		[with_xrt='no'])
if test $with_xrt != 'no'
then
   if test $with_xrt = 'yes'
   then
	XRTLIBS=''
	XRTINCLUDE=''
   else
	XRTLIBS="$with_xrt/lib -lxrt3d -lpdsutil"
	XRTINCLUDE="$with_xrt/include"
   fi
   MRM_LIB=''
   AC_CHECK_LIB(Mrm,MrmInitialize,MRM_LIB='-lMrm',,)
   XRTLIBS="$XRTLIBS $MRM_LIB"
   XM_LIB=''
   AC_CHECK_LIB(Xm,XmIsMotifWMRunning,XM_LIB='-lXm',,)
   XRTLIBS="$XRTLIBS $XM_LIB"
   XPM_LIB=''
   AC_CHECK_LIB(Xpm,XpmReadFileToImage,XPM_LIB='-lXpm',,)
   XRTLIBS="$XRTLIBS $XPM_LIB"

   AC_DEFINE(XRT_ENABLED)
   AC_DEFINE(HAVE_LIBXM)
fi

dnl
dnl Determine how to make shared objects using compiler/loader
dnl

#############################################################
# Determine which header file and which library is required
# to build daVinci with module (shared objects) support.
#

MODULE_LOAD_FUNC="dlopen"
#ADDNL_LDFLAGS="-Wexport-dynamic"

case "$target" in
hppa1.*-hp-hpux*)   MODULE_SUPP_LIB="dld" 
	MODULE_LOAD_FUNC="shl_load"
	ADDNL_LDFLAGS="-Wl,-E"
	AC_DEFINE(USE_HPUX_SHL) ;;
hppa2.*-hp-hpux*)   MODULE_SUPP_LIB="dl"   ;;
*-linux-*)          MODULE_SUPP_LIB="dl"   ;;
*-sgi-irix*)        MODULE_SUPP_LIB="c"    ;;
*-sun-solaris*)     MODULE_SUPP_LIB="dl"   ;;
*-ibm-aix4.3*)      MODULE_SUPP_LIB="c"    ;;
esac

#############################################################
# Determine the option to pass to the compiler to compile
# shared object sources (into position independent object
# code files).
#

if test "$GCC" = "yes" ; then
	MODULE_CC_OPT="-fPIC"
else
	case "$target" in
	hppa1.*-hp-hpux*)   MODULE_CC_OPT="+z"    ;;
	hppa2.*-hp-hpux*)   MODULE_CC_OPT="+Z"    ;;
	*-linux-*)          MODULE_CC_OPT="-fPIC" ;;
	*-sgi-irix*)        MODULE_CC_OPT="-KPIC" ;;
	*-sun-solaris*)     MODULE_CC_OPT="-Kpic" ;;
	*-ibm-aix4.3*)      MODULE_CC_OPT=""      ;;
	esac
fi

#############################################################
# Determine the option to pass to the compiler & linker to
# build shared objects from position independent object files.
#

if test "$GCC" = "yes" ; then
	case "$target" in
	hppa*-hp-hpux*) MODULE_LINKER="ld" MODULE_LINK_OPT="-B symbolic -b" ;;
	*)              MODULE_LINKER="gcc" MODULE_LINK_OPT="-shared" ;;
	esac
else
	MODULE_LINKER="cc"

	case "$target" in
	hppa*-hp-hpux*)  MODULE_LINKER="ld" MODULE_LINK_OPT="-B symbolic -b" ;;
	*-linux-*)       MODULE_LINK_OPT="-shared" ;;
	*-sgi-irix*)     MODULE_LINK_OPT="-shared" ;;
	*-sun-solaris*)  MODULE_LINK_OPT="-G" ;;
	*-ibm-aix4.3*)   MODULE_LINK_OPT="-K" ;;
	esac

fi

#############################################################
# AIX requires that any function in the daVinci binary which
# will be called from a modules, must be explicitly linked
# to the module (shared object). We do this by creating a
# library called "libmodsupp.a" (not to be confused with
# the value in MODULE_SUPP_LIB -- which is the system library
# providing the dynamic linking functionality.)
#

case "$target" in
*-ibm-aix4.3*)  MODULE_ADDN_LIBS="-lmodsupp";
esac

#############################################################
# Check if the selected library has the required function
# in it. That is: shl_load() for HPPA1.x and dlopen() for 
# the rest.
#

AC_CHECK_LIB($MODULE_SUPP_LIB, $MODULE_LOAD_FUNC, MODULE_SUPP_OBJS='$(MODULE_SUPP_OBJS)',,)
if test "$MODULE_SUPP_OBJS" != "" ; then
 	AC_DEFINE(BUILD_MODULE_SUPPORT)
	LIBS="$LIBS -l$MODULE_SUPP_LIB"
	LDFLAGS="$LDFLAGS $ADDNL_LDFLAGS"
	CFLAGS="$CFLAGS $ADDNL_CFLAGS"
fi

dnl Check for includes
AC_CHECK_HEADERS(values.h)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h sys/file.h sys/time.h unistd.h)

CPPFLAGS="$CPPFLAGS -I/usr/include/X11"
AC_CHECK_HEADERS(magick.h magick/api.h my_list.h Xm/Xrt3d.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(mkdir putenv select strdup strndup strspn strstr strtod strtol strtoul)
AC_CHECK_FUNCS(index rindex getdtablesize getwd usleep strtoul basename)
AC_CHECK_FUNCS(dirname bcopy bcmp bzero)

if test "$x_includes" != ""
then
	XINCLUDES=-I$x_includes
else
	XINCLUDES=''
fi

if test "$x_libraries" != ""
then
	XLIBS=-L$x_libraries
else
	XLIBS=''
fi

AC_SUBST(PROJ_OBJS)
AC_SUBST(MODULE_SUPP_OBJS)
AC_SUBST(MODULE_SUPP_LIB)
AC_SUBST(MODULE_CC_OPT)
AC_SUBST(MODULE_LINKER)
AC_SUBST(MODULE_LINK_OPT)
AC_SUBST(MODULE_ADDN_LIBS)

AC_SUBST(READLINE_OBJ)
AC_SUBST(READLINE_LIB)
AC_SUBST(MAKEREAD)
AC_SUBST(XINCLUDES)
AC_SUBST(XLIBS)
AC_SUBST(XRTINCLUDE)
AC_SUBST(XRTLIBS)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_OUTPUT(lib/Makefile Makefile modules/Makefile)

touch parser.c lexer.c
