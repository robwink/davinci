dnl Process this file with autoconf to produce a configure script.
AC_INIT(array.c)
AC_CONFIG_HEADER(config.h)

dnl Check for sytem type
AC_CANONICAL_SYSTEM

AC_CYGWIN
AC_EXEEXT
AC_OBJEXT

dnl Checks for programs.
AC_PROG_CC
AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl Check for AIX
AC_AIX

dnl Check for endian
AC_C_BIGENDIAN


dnl Support for compiling fully static binaries
AC_ARG_ENABLE(static,
	[  --enable-static         build a self-contained davinci executable (default is --disable-static) and implies --disable-modules],,
	enable_static=no)

dnl Enable/Disable modules
AC_ARG_ENABLE(modules,
	[  --disable-modules       removes modules related code from davinci (default is --enable-modules)],,
	enable_modules=yes)

dnl Set some defaults
test "$prefix" = NONE && prefix=/usr/local
test "$exec_prefix" = NONE && exec_prefix=${prefix}
dnl test "$libdir" = "NONE" && libdir=${prefix}/lib

dnl Check for X path.
AC_PATH_XTRA

dnl Checks for libraries.
old_LDFLAGS="$LDFLAGS"
if test "$x_libraries" != ""
then
	LDFLAGS="$LDFLAGS -L$x_libraries"
fi

dnl
dnl Merge in the libraries specified by the user at the command line
dnl

LDFLAGS="$LDFLAGS -L$libdir"


dnl **   N U A N C E S   **
dnl LINUX nuance:
dnl    configure establishes /usr/X11R6/include as the X_INCLUDE path
dnl    which creates problems for ImageMagick, which is located in
dnl    /usr/include/X11 (= /usr/X11R6/include/X11) instead.
dnl AIX nuance:
dnl    Enable linker on AIX to enable generating big TOCs.
case "$target" in
*-linux-gnu)  CFLAGS="$CFLAGS -I/usr/include/X11";;
*-ibm-aix4.3*)  LDFLAGS="$LDFLAGS -Wl,-b,bigtoc";;
esac


AC_CHECK_LIB(m, sqrt)
AC_CHECK_LIB(X11, XOpenDisplay)
AC_CHECK_LIB(Xt, XtToolkitInitialize)
AC_CHECK_LIB(Xext,XShmPutImage)
AC_CHECK_LIB(Xm,XmCreateForm)
AC_CHECK_LIB(z,deflate)
AC_CHECK_LIB(hdf5,H5open)
AC_CHECK_LIB(usds,Themis_Entry)
AC_CHECK_LIB(msss_vis,read_DCT)
AC_CHECK_LIB(termcap, tgetent)
AC_CHECK_LIB(ltdl, lt_dlopen)
AC_CHECK_LIB(qmv, qmv_version)

dnl This is a hack - think of a better way to handle it
if test "$ac_cv_lib_z_deflate" = "yes"; then
	AC_DEFINE(HAVE_LIBPNG)
fi

dnl AC_CHECK_LIB(jpeg,jpeg_simple_progression)
dnl AC_CHECK_LIB(bz2,bzopen)
dnl AC_CHECK_LIB(png,png_check_version)
dnl AC_CHECK_LIB(tiff,TIFFIsTiled)

dnl
dnl If we could not find libtermcap.a then see if we have
dnl libcurses.a instead.
dnl

if test "`echo $LIBS | grep termcap`" = ""
then
	AC_CHECK_LIB(curses, tgetent)
fi



dnl check existence of usable readline library
AC_MSG_CHECKING(if libreadline exists)
save_LIBS="$LIBS" LIBS="$LIBS -lreadline -lcurses"
AC_TRY_LINK_FUNC(rl_callback_handler_install, [libreadline_found=yes],
	[libreadline_found=no  LIBS="$save_LIBS"])
if test "$libreadline_found" = "yes"; then
	AC_DEFINE(HAVE_LIBREADLINE)
fi
AC_MSG_RESULT($libreadline_found)

dnl libreadline not found. Try looking in the subdirectory named "readline"
if test "$libreadline_found" = "no"; then

	AC_MSG_CHECKING(whether to build local libreadline)

	dnl make sure the subdirectory readline exists
	if test -d readline ; then
		AC_MSG_RESULT(yes)
dnl		save_LIBS="$LIBS" save_CFLAGS="$CFLAGS" save_LDFLAGS="$LDFLAGS"
		CFLAGS="$CFLAGS -I. -Ireadline" LDFLAGS="$LDFLAGS -Lreadline"
		READLINE_LIB="-lreadline" READLINE_OBJ="readline/libreadline.a"
		AC_DEFINE(HAVE_LIBREADLINE)
	else
		AC_MSG_RESULT(no)
	fi
fi

AC_CHECK_LIB(proj,pj_fwd,PROJ_OBJS="ff_projection.o",,)
if test "$PROJ_OBJS" != ""; then
	AC_CHECK_HEADERS(projects.h,[
			AC_DEFINE(HAVE_LIBPROJ)
			LIBS="-lproj $LIBS"
			],PROJ_OBJS="")
fi



PL_LIB=''
AC_CHECK_LIB(plplotFX,c_plinit,PL_LIB='-lplplotFX',,)
if test "$PL_LIB" != ""
then
	AC_DEFINE(INCLUDE_API)
	AC_DEFINE(HAVE_PLPLOT)
	LIBS="$PL_LIB $LIBS"
	dnl echo $LIBS
fi


#Check for the xrt3D lib and its dependancies
AC_ARG_ENABLE(xrt3d,
	 	[  --enable-xrt3d          enable xrt3d support (default is no)],
		[with_xrt=$enableval],
		[with_xrt='no'])
if test $with_xrt != 'no'
then
   if test $with_xrt = 'yes'
   then
	XRTLIBS=''
	XRTINCLUDE=''
   else
	XRTLIBS="$with_xrt/lib -lxrt3d -lpdsutil"
	XRTINCLUDE="$with_xrt/include"
   fi
   MRM_LIB=''
   AC_CHECK_LIB(Mrm,MrmInitialize,MRM_LIB='-lMrm',,)
   XRTLIBS="$XRTLIBS $MRM_LIB"
   XM_LIB=''
   AC_CHECK_LIB(Xm,XmIsMotifWMRunning,XM_LIB='-lXm',,)
   XRTLIBS="$XRTLIBS $XM_LIB"
   XPM_LIB=''
   AC_CHECK_LIB(Xpm,XpmReadFileToImage,XPM_LIB='-lXpm',,)
   XRTLIBS="$XRTLIBS $XPM_LIB"

   AC_DEFINE(XRT_ENABLED)
   AC_DEFINE(HAVE_LIBXM)
fi


dnl ========================================
dnl -- start - modules related processing --
dnl ========================================

dnl
dnl If module processing is disabled, bypass necessary stuff while running
dnl configure. This should reduce configure time as well.
dnl

if test "$enable_static" = "no"; then
if test "$enable_modules" = "yes"; then

	dnl
	dnl Determine how to make shared objects using compiler/loader
	dnl

	dnl
	dnl Determine which header file and which library is required
	dnl to build daVinci with module (shared objects) support.
	dnl

	MODULE_LOAD_FUNC="dlopen"
	#ADDNL_LDFLAGS="-Wexport-dynamic"

	case "$target" in
	hppa1.*-hp-hpux*)   MODULE_SUPP_LIB="dld" 
		MODULE_LOAD_FUNC="shl_load"
		ADDNL_LDFLAGS="-Wl,-E"
		AC_DEFINE(USE_HPUX_SHL) ;;
	hppa2.*-hp-hpux*)   MODULE_SUPP_LIB="dl"   ;;
	*-linux-*)          MODULE_SUPP_LIB="dl"   ;;
	*-sgi-irix*)        MODULE_SUPP_LIB="c"    ;;
	*-sun-solaris*)     MODULE_SUPP_LIB="dl"   ;;
	*-ibm-aix4.3*)      MODULE_SUPP_LIB="c"    ;;
	esac

	dnl 
	dnl Determine the option to pass to the compiler to compile
	dnl shared object sources (into position independent object
	dnl code files).
	dnl 

	if test "$GCC" = "yes" ; then
		MODULE_CC_OPT="-fPIC"
	else
		case "$target" in
		hppa1.*-hp-hpux*)   MODULE_CC_OPT="+z"    ;;
		hppa2.*-hp-hpux*)   MODULE_CC_OPT="+Z"    ;;
		*-linux-*)          MODULE_CC_OPT="-fPIC" ;;
		*-sgi-irix*)        MODULE_CC_OPT="-KPIC" ;;
		*-sun-solaris*)     MODULE_CC_OPT="-Kpic" ;;
		*-ibm-aix4.3*)      MODULE_CC_OPT=""      ;;
		esac
	fi

	dnl
	dnl Determine the option to pass to the compiler & linker to
	dnl build shared objects from position independent object files.
	dnl

	if test "$GCC" = "yes" ; then
		case "$target" in
		hppa*-hp-hpux*) MODULE_LINKER="ld" MODULE_LINK_OPT="-B symbolic -b" ;;
		*-linux-*)	MODULE_LINKER="gcc" MODULE_LINK_OPT="-shared" CFLAGS="$CFLAGS -rdynamic";;
		*)              MODULE_LINKER="gcc" MODULE_LINK_OPT="-shared" ;;
		esac
	else
		MODULE_LINKER="cc"

		case "$target" in
		hppa*-hp-hpux*)  MODULE_LINKER="ld" MODULE_LINK_OPT="-B symbolic -b" ;;
		*-linux-*)       MODULE_LINK_OPT="-shared" CFLAGS="$CFLAGS -rdynamic";;
		*-sgi-irix*)     MODULE_LINK_OPT="-shared" ;;
		*-sun-solaris*)  MODULE_LINK_OPT="-G" ;;
		*-ibm-aix4.3*)   MODULE_LINK_OPT="-K" ;;
		esac

	fi

	dnl
	dnl AIX requires that any function in the daVinci binary which
	dnl will be called from a modules, must be explicitly linked
	dnl to the module (shared object). We do this by creating a
	dnl library called "libmodsupp.a" (not to be confused with
	dnl the value in MODULE_SUPP_LIB -- which is the system library
	dnl providing the dynamic linking functionality.)
	dnl

	case "$target" in
	*-ibm-aix4.3*)  MODULE_ADDN_LIBS="-lmodsupp";
	esac

	dnl
	dnl Check if the selected library has the required function
	dnl in it. That is: shl_load() for HPPA1.x and dlopen() for 
	dnl the rest.
	dnl

	AC_CHECK_LIB($MODULE_SUPP_LIB, $MODULE_LOAD_FUNC, module_build_possible=yes, module_build_possible=no,)

	dnl
	dnl If modules can be built then set the appropriate compiler/linker/loader/binder flags.
	dnl
	dnl NOTE: If there is a need for setting up the modules Makefile correctly even though that
	dnl modules support is disabled, then the "if test "$enable_modules" = yes" should be moved
	dnl here instead.
	dnl

	if test "$module_build_possible" = "yes"; then
		AC_DEFINE(BUILD_MODULE_SUPPORT)
		MODULE_SUPP_OBJS='$(MODULE_SUPP_OBJS)'
		LIBS="$LIBS -l$MODULE_SUPP_LIB"
		LDFLAGS="$LDFLAGS $ADDNL_LDFLAGS"
		CFLAGS="$CFLAGS $ADDNL_CFLAGS"
	fi
else
	AC_MSG_WARN(Modules code disabled by user)
fi
else dnl We are compiling a fully static binary.

	AC_MSG_WARN(Compiling a fully static binary.  ** NO MODULE SUPPORT! **)
	
	if test "$GCC" = "yes" ; then
		STATIC_CFLAGS="-fPIC -static"
	else
		case "$target" in
		hppa1.*-hp-hpux*)   STATIC_CFLAGS="-noshared"    ;;
		hppa2.*-hp-hpux*)   STATIC_CFLAGS="-noshared"    ;;
		*-linux-*)          STATIC_CFLAGS="-fPIC -static" ;;
		*-sgi-irix*)        STATIC_CFLAGS="-KPIC -static" ;;
		*-sun-solaris*)     STATIC_CFLAGS="" ;;
		*-ibm-aix4.3*)      STATIC_CFLAGS=""      ;;
		esac
	fi

fi

dnl ========================================
dnl --  end - modules related processing  --
dnl ========================================


dnl Check for includes
AC_CHECK_HEADERS(values.h)
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(libgen.h)
AC_CHECK_HEADERS(qmv/hvector.h)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h malloc.h sys/file.h sys/time.h unistd.h)

CPPFLAGS="$CPPFLAGS -I/usr/include/X11"
AC_CHECK_HEADERS(my_list.h Xm/Xrt3d.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(mkdir putenv select strdup strndup strspn strstr strtod strtol strtoul)
AC_CHECK_FUNCS(index rindex getdtablesize getwd usleep strtoul basename)
AC_CHECK_FUNCS(dirname bcopy bcmp bzero)

if test "$x_includes" != ""
then
	XINCLUDES=-I$x_includes
	X_INCLUDE_DIR=$x_includes
else
	XINCLUDES=''
	X_INCLUDE_DIR=''
fi

if test "$x_libraries" != ""
then
	XLIBS=-L$x_libraries
else
	XLIBS=''
fi

CFLAGS="$CFLAGS $STATIC_CFLAGS"

AC_SUBST(PROJ_OBJS)
AC_SUBST(MODULE_SUPP_OBJS)
AC_SUBST(MODULE_SUPP_LIB)
AC_SUBST(MODULE_CC_OPT)
AC_SUBST(MODULE_LINKER)
AC_SUBST(MODULE_LINK_OPT)
AC_SUBST(MODULE_ADDN_LIBS)
AC_SUBST(QMV_LIB)

AC_SUBST(READLINE_OBJ)
AC_SUBST(READLINE_LIB)
AC_SUBST(MAKEREAD)
AC_SUBST(XINCLUDES)
AC_SUBST(X_INCLUDE_DIR)
AC_SUBST(XLIBS)
AC_SUBST(XRTINCLUDE)
AC_SUBST(XRTLIBS)

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

AC_SUBST(IMLDFLAGS)
AC_SUBST(IMLIBS)
AC_SUBST(IMCFLAGS)
AC_SUBST(IMCPPFLAGS)

AC_SUBST(HELPFILE_DEF)

AC_CONFIG_SUBDIRS(iomedley readline)

AC_OUTPUT(lib/Makefile Makefile modules/Makefile)

touch parser.c lexer.c
