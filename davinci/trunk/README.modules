BASICS


daVinci module processing code is contained in ff_modules.c and
module_io.c.

daVinci modules are essentially ".so"s (shared-objects) or
shared-libraries or ".dll"s.  I'll use the term shared-object in the
text below to refer to any one of these variations. Shared objects
are compiled as "position-independent-code" (which is different
from relocatable code).

WRITING MODULES

daVinci modules must have the following in them:

a)  An initialization function with the same prototype as the type
	"dvModuleInitFunc" defined in ff_modules.h. Its name must be
	whatever is specified in "DV_MODULE_INIT_FUNC_NAME" in 
	ff_modules.h.

	The initialization function must fill in the dvModuleInitStuff
	structure passed to it. The structure is composed of a list of
	functions exported by the module and a list of modules the current
	module is dependent upon.

c)	A finalization function with the same prototype as the type
	"dvModuleFiniFunc" defined in ff_modules.h. Its name must be
	whatever is specified in "DV_MODULE_FINI_FUNC_NAME" in
	ff_modules.h

d)	All the functions other than the initialization and finalization
	functions must be declared "static" otherwise, they may interfere
	with similarly named functions in other modules.

e)	All the global variables must also be declared "static".

f)	The list of functions and modules passed back must remain 
	intact on return from the initialization function and all
	through the lifetime of the loaded module. In other words,
	the value filled into the "dvModuleInitStuff *" better
	remain there till the point the module is unloaded.


Two example modules are available in the "modules" sub-directory.
"mod1" exports "jack" and "sam", while "mod2" exports "foo" and "bar".
Module "mod2" is dependent upon module "mod1". So, loading "mod2"
automatically loads "mod1" as well.

A Makefile is also available in the "modules" sub-directory, which can
be used as a template for making modules.
