#!/bin/sh
#
# exercise the basic i/o function of davinci.
#

scale=0
echo "using" `which davinci`

if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
  # Stardent Vistra SVR4 grep lacks -e, says ghazi@caip.rutgers.edu.
  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
    ac_n= ac_c='
' ac_t='        '
  else
    ac_n=-n ac_c= ac_t=
  fi
else
  ac_n= ac_c='\c' ac_t=
fi


fail() { 
	echo "failed: $1" 
	exit 1 
}
pass() { 
	echo "passed." 
}

match_number() {
	p2=`echo "scale=$scale ; if ($2 == $1) 1" | bc`
	p3="scale=$scale ; if ($2 == $1) 1"

	if test "$p2" != "1"
	then
		fail "$p2"
	fi
	pass
}

match_string() {
	if test "$1" = "$2"
	then
		pass
	else
		echo $1 "!=" $2
		fail
	fi
}

math_with_bc() {
	echo $ac_n "$1... $ac_c"
	p1=`davinci -qe 'echo('"$2"')'`
	if test $?3 = 1
	then
		match_number "$3" "$p1"
	else
		match_number "$2" "$p1"
	fi
}

semicolon_test() {
	echo $ac_n "     multiple statments $1... $ac_c"
	p1=`davinci -qe '1+1;2+2;3+3' | tr -d '[:space:]'`
	match_string "$p1" "246"
}

test1() {
	echo "Test 1: basic math"

	scale=0;
	math_with_bc "     addition      " "1+2+3+4+5+6+7+8+9"
	math_with_bc "     multiplication" "1*2*3*4*5*6*7*8*9"
	math_with_bc "     subtraction   " "1-2-3-4-5-6-7-8-9"
	math_with_bc "     division      " "1024/2/3/4/5"
	math_with_bc "     unary minus   " "-1024 -1024"
	math_with_bc "     modulo        " "239 % 53"
	math_with_bc "     grouping      " "(11+12)*(13+14)"
	math_with_bc "     precendence   " "11+12*13+14"
	#
	# everything together
	#
	math_with_bc "     combined      " "-1024/(((12+13*14+15)/3)%13)"

	scale=9
	math_with_bc "     add/mul       " "1.1*2.2+3.3*4.4+5.5"
	math_with_bc "     sub/div       " "1.0-1.0/2-1.0/2/2-1.0/2/2/2-1.0/2/2/2/2"
	math_with_bc "     power         " "2^5"

	semicolon_test

	echo
}

logic_test() {
	echo $ac_n "     logical $1... $ac_c"
	p1=""
	p2=""
	for i in 0 1 2 3
	do
		for j in 0 1 2 3
		do
			p1=$p1"$i$1$j;"
			p2=$p2"if ( $i $1 $j ) echo 1 ; if ! ( $i $1 $j ) echo 0;"
		done
	done
	p2=`csh -cf "$p2" | tr -d '[:space:]'`
	p3=`davinci -qe "$p1" | tr -d '[:space:]'`
	match_string "$p2" "$p3"
}

string_logic_test() {
	echo $ac_n "     string $1... $ac_c"
	p1=""
	p2="BEGIN {"
	for i in zero one two three
	do
		for j in zero one two three
		do
			p1=$p1" \"$i\" $1 \"$j\" ;"
			p2=$p2' if ("'$i'"'"$1"'"'$j'") print 1; else print 0; '
		done
	done
	p2=$p2' }'
	p2=`awk "$p2" | tr -d '[:space:]'`
	p3=`davinci -qe "$p1" | tr -d '[:space:]'`
	match_string "$p2" "$p3"
}

test2() {
	echo "Test 2: boolean logic"

	logic_test "< " 
	logic_test "> " 
	logic_test "<=" 
	logic_test ">=" 
	logic_test "==" 
	logic_test "!=" 
	logic_test "||"
	logic_test "&&" 

	string_logic_test "< " 
	string_logic_test "> " 
	string_logic_test "<=" 
	string_logic_test ">=" 
	string_logic_test "==" 
	string_logic_test "!=" 

	echo
}

test3() {
	echo "Test 3: basic output"
	
	echo $ac_n "     printf()... $ac_c"
	p1=`davinci -qe 'printf("%d_%.2f", 4*3, 4.0/3)'`
	match_string "$p1" "12_1.33"

	echo $ac_n "     echo()... $ac_c"
	p1=`davinci -qe 'echo("mary_had_a_little_lamb")'`
	match_string "$p1" '"mary_had_a_little_lamb"'

	echo $ac_n "     echo()... $ac_c"
	p1=`davinci -qe 'echo(3.0/4)'`
	match_number "$p1" 0.75

	echo
}

if_test() {

	echo $ac_n "     if... $ac_c"
	
	cmd="if (1) echo(1);"
	p1=`davinci -qev0 "$cmd"`
	match_number "$p1" "1"

	echo $ac_n "     else... $ac_c"

	cmd="if (0) echo(1); else echo(2);"
	p1=`davinci -qev0 "$cmd"`
	match_number "$p1" "2"
}

compound_statement() {

	echo $ac_n "     compound statement... $ac_c"
	cmd='if (1) {
			echo (1)
			echo (2)
		}'
	p1=`davinci -qev0 "$cmd" | tr -d '[:space:]'`
	match_string "$p1" "12"

	echo $ac_n "     compound else... $ac_c"
	cmd='if (0) {
			echo (1)
			echo (2)
		} else {
			echo (2)
			echo (1)
		}'
	p1=`davinci -qev0 "$cmd" | tr -d '[:space:]'`
	match_string "$p1" "21"
}

test4() {
	echo "Test 4: control flow "

	if_test
	compound_statement

	echo
}

test5() {
	echo "Test 5: variables"

	echo $ac_n "     assignment... $ac_c"
	cmd='x=1;y=x+1;w=z=y+2;printf("%d%d%d%d %d", x,y,z,w,x*y*z)'
	p1=`davinci -qev0 "$cmd"`
	match_string "$p1" "1244 8"


#	echo $ac_n "     not found... $ac_c"
#	cmd='echo(x)'
#	p1=`davinci -qe "$cmd"`
#	match_string "`echo $p1 | cut -d: -f1`" "Unable to find variable: x"

	echo $ac_n "     command line arguments... $ac_c"
	str=""
	p2=""
	p3=""
	cmd='printf("%s", $1) ; printf(" %s", $ARGV[$ARGC])'
	for i in zero one two three four five six seven eight nine ten
	do
		str=$str" $i"
		p1=`davinci -qe "$cmd" $str`
		p2="$p2 $p1"
		p3=$p3" zero $i"
	done
	match_string "$p2" "$p3"
}


test1
test2
test3
test4
test5


#	for_statement
#	while_statement
#	break_and_continue
# command line options

# type promotion for math
